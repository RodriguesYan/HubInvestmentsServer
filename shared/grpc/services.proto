syntax = "proto3";

package hub_investments;

option go_package = "./proto";

// ====================================
// SERVICE DEFINITIONS
// ====================================

// AuthService provides authentication operations
service AuthService {
  // Login authenticates a user and returns a JWT token
  rpc Login(LoginRequest) returns (LoginResponse);
  // ValidateToken validates a JWT token and returns user info
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
}

// OrderService provides order management operations
service OrderService {
  // SubmitOrder submits a new trading order
  rpc SubmitOrder(SubmitOrderRequest) returns (SubmitOrderResponse);
  // GetOrderDetails retrieves detailed information about a specific order
  rpc GetOrderDetails(GetOrderDetailsRequest) returns (GetOrderDetailsResponse);
  // GetOrderStatus retrieves the status of a specific order
  rpc GetOrderStatus(GetOrderStatusRequest) returns (GetOrderStatusResponse);
  // CancelOrder cancels a pending order
  rpc CancelOrder(CancelOrderRequest) returns (CancelOrderResponse);
}

// PositionService provides position management operations
service PositionService {
  // GetPositions retrieves all positions for a user
  rpc GetPositions(GetPositionsRequest) returns (GetPositionsResponse);
  // GetPositionAggregation retrieves aggregated position data for a user
  rpc GetPositionAggregation(GetPositionAggregationRequest) returns (GetPositionAggregationResponse);
  // CreatePosition creates a new position (for internal use)
  rpc CreatePosition(CreatePositionRequest) returns (CreatePositionResponse);
  // UpdatePosition updates an existing position (for internal use)
  rpc UpdatePosition(UpdatePositionRequest) returns (UpdatePositionResponse);
}

// ====================================
// COMMON MESSAGE TYPES
// ====================================

// APIResponse is a common response type for all services
message APIResponse {
  bool success = 1;
  string message = 2;
  int32 code = 3;
  int64 timestamp = 4;
}

// UserInfo contains basic user information
message UserInfo {
  string user_id = 1;
  string email = 2;
  string first_name = 3;
  string last_name = 4;
}

// ErrorDetails provides detailed error information
message ErrorDetails {
  string error = 1;
  string message = 2;
  int32 code = 3;
  repeated string details = 4;
}

// ====================================
// AUTHENTICATION SERVICE MESSAGES
// ====================================

message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  APIResponse api_response = 1;
  string token = 2;
  UserInfo user_info = 3;
}

message ValidateTokenRequest {
  string token = 1;
}

message ValidateTokenResponse {
  APIResponse api_response = 1;
  bool is_valid = 2;
  UserInfo user_info = 3;
  int64 expires_at = 4;
}

// ====================================
// ORDER SERVICE MESSAGES
// ====================================

message SubmitOrderRequest {
  string user_id = 1;
  string symbol = 2;
  string order_type = 3;  // MARKET, LIMIT, STOP_LOSS, STOP_LIMIT
  string order_side = 4;  // BUY, SELL
  double quantity = 5;
  optional double price = 6;  // Required for LIMIT orders
}

message SubmitOrderResponse {
  APIResponse api_response = 1;
  string order_id = 2;
  string status = 3;
  optional double estimated_price = 4;
  optional double estimated_value = 5;
  optional double market_price = 6;
  string submitted_at = 7;
}

message GetOrderDetailsRequest {
  string order_id = 1;
  string user_id = 2;
}

message GetOrderDetailsResponse {
  APIResponse api_response = 1;
  OrderDetails order = 2;
}

message GetOrderStatusRequest {
  string order_id = 1;
  string user_id = 2;
}

message GetOrderStatusResponse {
  APIResponse api_response = 1;
  string order_id = 2;
  string status = 3;
  string status_message = 4;
  string updated_at = 5;
}

message CancelOrderRequest {
  string order_id = 1;
  string user_id = 2;
}

message CancelOrderResponse {
  APIResponse api_response = 1;
  string order_id = 2;
  string status = 3;
  string cancelled_at = 4;
}

// OrderDetails contains complete order information
message OrderDetails {
  string order_id = 1;
  string user_id = 2;
  string symbol = 3;
  string order_type = 4;
  string order_side = 5;
  double quantity = 6;
  optional double price = 7;
  string status = 8;
  string created_at = 9;
  string updated_at = 10;
  optional string executed_at = 11;
  optional double execution_price = 12;
  optional double market_price_at_submission = 13;
  optional string market_data_timestamp = 14;
  double estimated_value = 15;
  optional double execution_value = 16;
}

// ====================================
// POSITION SERVICE MESSAGES
// ====================================

message GetPositionsRequest {
  string user_id = 1;
  optional string symbol = 2;  // Filter by symbol if provided
  optional string status = 3;  // Filter by status if provided
}

message GetPositionsResponse {
  APIResponse api_response = 1;
  repeated Position positions = 2;
}

message GetPositionAggregationRequest {
  string user_id = 1;
}

message GetPositionAggregationResponse {
  APIResponse api_response = 1;
  PositionAggregation aggregation = 2;
}

message CreatePositionRequest {
  string user_id = 1;
  string symbol = 2;
  double quantity = 3;
  double price = 4;
  string position_type = 5;  // LONG, SHORT
  optional string source_order_id = 6;
  optional string created_from = 7;
}

message CreatePositionResponse {
  APIResponse api_response = 1;
  string position_id = 2;
  string status = 3;
  double total_investment = 4;
}

message UpdatePositionRequest {
  string position_id = 1;
  string user_id = 2;
  double trade_quantity = 3;
  double trade_price = 4;
  bool is_buy_order = 5;
  optional string source_order_id = 6;
  optional string execution_time = 7;
}

message UpdatePositionResponse {
  APIResponse api_response = 1;
  string position_id = 2;
  double new_quantity = 3;
  double new_average_price = 4;
  double new_total_investment = 5;
  string status = 6;
  string transaction_type = 7;
  optional double realized_pnl = 8;
  optional double realized_pnl_pct = 9;
  int32 events_published = 10;
}

// Position contains position information
message Position {
  string position_id = 1;
  string user_id = 2;
  string symbol = 3;
  double quantity = 4;
  double average_price = 5;
  double total_investment = 6;
  double current_price = 7;
  double market_value = 8;
  double unrealized_pnl = 9;
  double unrealized_pnl_pct = 10;
  string position_type = 11;  // LONG, SHORT
  string status = 12;         // ACTIVE, PARTIAL, CLOSED
  string created_at = 13;
  string updated_at = 14;
  optional string last_trade_at = 15;
}

// PositionAggregation contains aggregated position data
message PositionAggregation {
  double total_invested = 1;
  double total_current_value = 2;
  double total_unrealized_pnl = 3;
  double total_unrealized_pnl_pct = 4;
  int32 total_positions = 5;
  int32 active_positions = 6;
  repeated CategoryAggregation categories = 7;
  repeated Position positions = 8;
}

// CategoryAggregation contains aggregated data by asset category
message CategoryAggregation {
  int32 category_id = 1;
  string category_name = 2;
  double total_invested = 3;
  double total_current_value = 4;
  double total_unrealized_pnl = 5;
  double unrealized_pnl_pct = 6;
  int32 position_count = 7;
  double weight_pct = 8;
}
